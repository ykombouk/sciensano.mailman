# -*- coding: utf-8 -*-
# Mailman Web configuration file.
# /etc/mailman3/settings.py

from mailman_web.settings.base import *
from mailman_web.settings.mailman import *


#: Default list of admins who receive the emails from error logging.
ADMINS = (
{% for admin in __mailman3_django_config_merged.admins %}
    ('{{ admin.name }}', '{{ admin.email }}'),
{% endfor %}
)

# Postgresql database setup.
DATABASES = {
{% for key in __mailman3_django_config_merged.databases | sort %}
    '{{ key }}': {
{% for opt in __mailman3_django_config_merged.databases[key] | sort %}
        '{{ opt }}': '{{ __mailman3_django_config_merged.databases[key][opt] }}',
{% endfor %}
    }
{% endfor %}
}

# 'collectstatic' command will copy all the static files here.
# Alias this location from your webserver to `/static`
STATIC_ROOT = '{{ mailman3_django_static_dir }}'

# enable the 'compress' command.
COMPRESS_ENABLED = True

{% if mailman3_web_log_file is defined %}
# Make sure that this directory is created or Django will fail on start.
LOGGING['handlers']['file']['filename'] = os.path.join('{{ mailman3_django_log_dir }}', 'mailman-web.log')
{% else %}
#: Logging configuration.
del LOGGING['handlers']['file']
LOGGING['handlers']['console']['level'] = 'INFO'
LOGGING['formatters']['simple']['format'] = '%(levelname)s %(name)s %(message)s'
# In case the handler config is updated upstream, we don't want to fully overwrite it, so we just manipulate it
for _logger in LOGGING['loggers'].values():
    _handlers = _logger['handlers']
    for _handler in ('file', 'mail_admins'):
        try:
            _handlers.remove(_handler)
        except ValueError:
            pass
    if 'console' not in _handlers:
        _logger['handlers'].append('console')
{% endif %}

#: Hosts/domain names that are valid for this site; required if DEBUG is False.
#: See https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
ALLOWED_HOSTS = [
    "localhost",  # Archiving API from Mailman, keep it.
    "127.0.0.1",
    # Add here all production URLs you may have.
{% for host in __mailman3_django_config_merged.allowed_hosts %}
    "{{ host }}",
{% endfor %}
]
{% if mailman3_django_urls_module_name %}

#: URL Configuration for Django
ROOT_URLCONF = '{{ mailman3_django_urls_module_name }}'
{% endif %}

#: See https://docs.djangoproject.com/en/dev/ref/settings/#csrf-trusted-origins
#: For Django <4.0 these are of the form 'lists.example.com' or
#: '.example.com' to include subdomains and for Django >=4.0 they include
#: the scheme as in 'https://lists.example.com' or 'https://*.example.com'.
CSRF_TRUSTED_ORIGINS = [
    # "lists.your-domain.org",
    # Add here all production domains you have.
{% for origin in __mailman3_django_config_merged.csrf_trusted_origins %}
    "{{ origin }}",
{% endfor %}
]

#: Current Django Site being served. This is used to customize the web host
#: being used to serve the current website. For more details about Django
#: site, see: https://docs.djangoproject.com/en/dev/ref/contrib/sites/
SITE_ID = {{ __mailman3_django_config_merged.site_id | default(1) }}

# Set this to a new secret value.
SECRET_KEY = "{{ __mailman3_django_config_merged.secret_key | default('change-this-on-your-production-server') }}"

# Set this to match the api_key setting in
# /opt/mailman/mm/mailman-hyperkitty.cfg (quoted here, not there).
MAILMAN_ARCHIVER_KEY = '{{ __mailman3_django_config_merged.archiver_key | default('SecretArchiverAPIKey') }}'
{% if __mailman3_django_config_merged.archiver_from is defined %}
MAILMAN_ARCHIVER_FROM = (
{% for host in __mailman3_django_config_merged.archiver_from %}
    '{{ host }}',
{% endfor %}
)
{% endif %}

# The sender of emails from Django such as address confirmation requests.
# Set this to a valid email address.
DEFAULT_FROM_EMAIL = '{{ __mailman3_django_config_merged.default_from_email }}'

# The sender of error messages from Django. Set this to a valid email
# address.
SERVER_EMAIL = '{{ __mailman3_django_config_merged.server_email }}'

# Mailman API credentials
MAILMAN_REST_API_URL = '{{ __mailman3_django_config_merged.rest_api_url | default('http://localhost:8001') }}'
MAILMAN_REST_API_USER = '{{ __mailman3_django_config_merged.rest_api_user | default('restadmin') }}'
MAILMAN_REST_API_PASS = '{{ __mailman3_django_config_merged.rest_api_pass | default('restpass') }}'
{% if mailman3_use_pysassc %}

#: django-compressor
#: https://pypi.python.org/pypi/django_compressor
COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'pysassc -t compressed {infile} {outfile}'),
    ('text/x-sass', 'pysassc -t compressed {infile} {outfile}'),
)
{% endif %}
{% if __mailman3_django_config_merged.debug | default(false) | bool %}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# When DEBUG is True, don't actually send emails to the SMTP server, just store
# them in a directory. This way you won't accidentally spam your mailing-lists
# while you're fiddling with the code.
EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = os.path.join("{{ mailman3_web_var_dir }}", 'emails')
{% endif %}
{% if __mailman3_django_config_merged.haystack_engine is defined %}

#
# Full-text search engine
#
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': '{{ __mailman3_django_config_merged.haystack_engine }}',
        'PATH': os.path.join("{{ mailman3_web_var_dir }}", "fulltext_index"),
    },
}
{% endif %}
{% if __mailman3_django_config_merged.socialaccount_providers is defined %}

{% for provider in __mailman3_django_config_merged.socialaccount_providers | sort %}
INSTALLED_APPS.append('allauth.socialaccount.providers.{{ provider }}')
{% endfor %}
{% endif %}
{% if __mailman3_django_config_merged.use_x_forwarded_host is defined %}

# If you're behind a proxy, use the X-Forwarded-Host header
# See https://docs.djangoproject.com/en/1.8/ref/settings/#use-x-forwarded-host
USE_X_FORWARDED_HOST = {{ __mailman3_django_config_merged.use_x_forwarded_host | bool | ternary('True', 'False') }}
{% endif %}
{% if __mailman3_django_config_merged.secure_proxy_ssl_header is defined %}

# And if your proxy does your SSL encoding for you, set SECURE_PROXY_SSL_HEADER
# https://docs.djangoproject.com/en/1.8/ref/settings/#secure-proxy-ssl-header
SECURE_PROXY_SSL_HEADER = ('{{ __mailman3_django_config_merged.secure_proxy_ssl_header }}', 'https')
{% endif %}
{% if __mailman3_django_config_merged.language_code is defined %}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
LANGUAGE_CODE = '{{ __mailman3_django_config_merged.language_code }}'
{% endif %}
{% if __mailman3_django_config_merged.time_zone is defined %}

TIME_ZONE = '{{ __mailman3_django_config_merged.time_zone }}'
{% endif %}
{% if __mailman3_django_config_merged.default_http_protocol is defined %}

# Django Allauth
# You probably want https in production
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "{{ __mailman3_django_config_merged.default_http_protocol }}"
{% endif %}
{% if __mailman3_django_config_merged.socialaccount_providers is defined %}

SOCIALACCOUNT_PROVIDERS = {
{% for key in __mailman3_django_config_merged.socialaccount_providers | sort %}
{# This just dumps Ansible's Python representation of the value, which isn't ideal, but it probably works #}
    '{{ key }}': {{ __mailman3_django_config_merged.socialaccount_providers[key] }}
{% endfor %}
}
{% endif %}
{% if __mailman3_django_config_merged.compress_offline is defined %}

#
# django-compressor
# https://pypi.python.org/pypi/django_compressor
#
# On a production setup, setting COMPRESS_OFFLINE to True will bring a
# significant performance improvement, as CSS files will not need to be
# recompiled on each requests. It means running an additional "compress"
# management command after each code upgrade.
# http://django-compressor.readthedocs.io/en/latest/usage/#offline-compression
COMPRESS_OFFLINE = {{ __mailman3_django_config_merged.compress_offline | bool | ternary('True', 'False') }}
{% endif %}
{% if __mailman3_django_config_merged.hyperkitty_attachment_folder is defined %}

HYPERKITTY_ATTACHMENT_FOLDER = '{{ __mailman3_django_config_merged.hyperkitty_attachment_folder }}'
{% endif %}
{% if mailman3_wsgi_socket.startswith("/") %}

# Add custom middleware to set REMOTE_ADDR when using a unix domain socket
MIDDLEWARE = MIDDLEWARE + ('{{ mailman3_django_middleware_module_name }}.SetRemoteAddrFromForwardedFor',)
{% endif %}
